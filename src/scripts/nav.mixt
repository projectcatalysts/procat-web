namespace nav

import [
	html = "html.mixt"
]

{
	// nav::header
	nav::header = (siteName as text, docTitle as text, docIndex as number, docSet as list) => html::attributed(
		{
			class = "topbar mobile-only"
			role = "banner"
		}
		{
			div = html::attributed(
				{
					class = "topbar-row"
				}
				[
					div = html::class( "topbar-spacer", "Contents" )
					a = html::attributed(
						{
							class = "brand"
							href = "/"
						}
						{
							img = html::attributed(
								{
									src = "/assets/images/procat_banner_white_transparent.png"
									alt = siteName & " logo"
								}
								null
							)
						}
					)
					label = html::attributed(
						{
							for = "sidebar-toggle"
							class = "topbar-nav-toggle"
							aria-controls = "sidebar"
							role = "button"
							tabindex = "0"
						}
						"Contents"
					)
				]
			)
		}
	)

	// nav::sidebar
	nav::sidebar = (siteName as text, pageIndex as number) => html::attributed(
		{
			id = "sidebar"
			class = "sidebar"
		}
		[
			a = html::attributed(
				{
					class = "brand desktop-only"
					href = "/"
				}
				[
					img = html::attributed(
						{
							src = "/assets/images/procat_banner_white_transparent.png"
							alt = siteName & " banner"
						}
						null
					)
				]
			)
			nav = html::attributed(
				{
					class = "toc"
					aria-label = "Site navigation"
				}
				[
					details = html::attributed(
						{
							class = "toc-group"
							data-page = "home"
							open = (pageIndex == 0)
						}
						[
							summary = html::class(
								"toc-heading"
								"Home"
							)
							ul = html::class(
								"toc-links"
								[
									[
										a = html::attributed(
											{
												href = "/#payments-systems"
											}
											"Payments"
										)
									]
									[
										a = html::attributed(
											{
												href = "/#enterprise-data-transformation"
											}
											"Data"
										)
									]
									[
										a = html::attributed(
											{
												href = "/#bespoke-software"
											}
											"Software"
										)
									]
								]
							)
						]
					)
					details = html::attributed(
						{
							class = "toc-group"
							data-page = "people"
							open = (pageIndex == 1)
						}					
						[
							summary = html::class(
								"toc-heading"
								"Our People"
							)
							ul = html::class(
								"toc-links"
								[
									[
										a = html::attributed(
											{
												href = "/people/#"
											}
											"Our People"
										)
									]									
									[
										a = html::attributed(
											{
												href = "/people/#rik"
											}
											"Rik"
										)
									]
								]
							)
						]
					)
					details = html::attributed(
						{
							class = "toc-group"
							data-page = "delivery"
							open = (pageIndex == 1)
						}					
						[
							summary = html::class(
								"toc-heading"
								"Delivered Outcomes"
							)
							ul = html::class(
								"toc-links"
								[
									[
										a = html::attributed(
											{
												href = "/delivered/#"
											}
											"Delivered Outcomes"
										)
									]									
									[
										a = html::attributed(
											{
												href = "/delivered/#iso20022"
											}
											"ISO 20022"
										)
									]
									[
										a = html::attributed(
											{
												href = "/delivered/#asb"
											}
											"ASB"
										)
									]
									[
										a = html::attributed(
											{
												href = "/delivered/#fiserv"
											}
											"FISERV"
										)
									]
									[
										a = html::attributed(
											{
												href = "/delivered/#barcap"
											}
											"Barclays Capital"
										)
									]
									[
										a = html::attributed(
											{
												href = "/delivered/#mixt"
											}
											"What's Next"
										)
									]
								]
							)
						]
					)
					details = html::attributed(
						{
							class = "toc-group"
							data-page = "home"
							open = (pageIndex == 2)
						}						
						[
							summary = html::class(
								"toc-heading"
								"About"
							)
							ul = html::class(
								"toc-links"
								[
									[
										a = html::attributed(
											{
												href = "/about/#"
											}
											"Overview"
										)
									]									
									[
										a = html::attributed(
											{
												href = "/about/#approach"
											}
											"Approach"
										)
									]
									[
										a = html::attributed(
											{
												href = "/about/#principles"
											}
											"Principles"
										)
									]
								]
							)
						]
					)
				]
			)
		]
	)

	// nav::nav
	nav::nav = (
		docTitle as text,
		chaptersAndClauses as list,
		docIndex as number,
		docSet as list
	) => html::attributed(
		{
			id = "procat-toc"
			class = "procat-toc"
			aria-label = "Table of contents"
		}
		[
			// Document switcher (optional if header switcher is shown)
			div = html::class(
				"toc-group toc-docs"
				[
					div = html::class( "toc-heading", "Documents" )
					ul = html::class(
						"toc-links"
						List.Transform(
							docSet
							(doc, i) => (
								let 
									target = doc{ target }
									title = doc{ title }
									transformed = #(li = {
										a = html::attributed(
											(
												if i == docIndex then
													{
														href = target
														class="active"
														aria-current="page"
													}
												else
													{
														href = target
													}
											)
											title
										)
									})
								in
									transformed
							)
						)
					)
				]
			)

			// Chapters
			div = html::class(
				"toc-group toc-chapters"
				[
					div = html::class( "toc-heading", "Chapters" )
				]
				&
				List.Transform(
					chaptersAndClauses
					(chapterAndClauses) => (
						#(details =
							[
								summary = chapterAndClauses{ Chapter }
								ul = html::class(
									"toc-links"
									List.Transform(
										chapterAndClauses{ Clauses }
										(clause, i, name) => #(li = {
											a = html::attributed(
												{
													href = html::href( name, clause, "#" )
												}
												(
													if name == "" then
														clause
													else
														$"$(name) $(clause)"
												)
											)	
										})
									)
								)
							]
						)
					)
				)
			)
		]
	)

	// getHtmlClass
	getHtmlClass = ( value as any ) => (
		if Value.HasMetadata( value ) then
			let
				attributes = Record.FieldOrDefault(
					Value.Metadata( value )
					Identifier.FromText( "html", "attributes" )
					null
				)
				class = (
					if attributes == null then
						null
					else
						Record.FieldOrDefault( attributes, "class", null )
				)
			in
				class
		else
			""
	)

	combineClasses = ( class1 as text, class2 as text ) => (
		if class2 == "" then
			class1
		else
			$"$(class1) $(class2)"
	)

	// nav::main
	nav::main = (siteOwner as text, docContent as list) => html::class(
		combineClasses( "content", getHtmlClass( docContent{ body } ) )
		docContent{ body } & [
			footer = html::class(
				"footer"
				html::copyright( siteOwner )
			) 
		]
	)

	// menuClass
	menuClass = (currentIndex as UInt64.Type, activeIndex as UInt64.Type) => (
		if currentIndex == activeIndex then
			"menu-branch active"
		else
			"menu-branch"
	)

	nav::menu = (activeIndex as UInt64.Type) => [
		div = html::class(
			"menu-container"
			[
				div = html::class(
					"menu-root"
					[
						"Payments NZ Rules"
						"Part 9"
						"HVCS Clearing and Settlement"
					]
				)

				div = html::class(
					"menu-branches"
					[
						a = html::styled_link(
							"overview.html"
							menuClass( 0, activeIndex )
							[
								"Part A"
								"HVCS Overview"
							]
						)
						a = html::styled_link(
							"common.html"
							menuClass( 1, activeIndex )
							[
								"Part B"
								"HVCS Common Procedures"
							]
						)
						a = html::styled_link(
							"scp.html"
							menuClass( 2, activeIndex )
							[
								"Part C"
								"SCP Procedures"
							]
						)
						a = html::styled_link(
							"mx.html"
							menuClass( 3, activeIndex )
							[
								"Part D"
								"MX Messaging Procedures (ISO 20022)"
							]
						)
						a = html::styled_link(
							"mt.html"
							menuClass( 4, activeIndex )
							[
								"Part E"
								"MT Messaging Procedures (ISO 15022)"
							]
						)
						a = html::styled_link(
							"coexistence.html"
							menuClass( 5, activeIndex )
							[
								"Part F"
								"Co-existence Procedures"
							]
						)
					]
				)
			]
		)
		div = html::class(
			"menu-caption"
			"Diagram 01: HVCS Rules and Procedures documentation structure"
		)
	]
}
