namespace nav

import [
	html = "html.mixt"
]

{
	// nav::header
	nav::header = (siteName as text, docTitle as text, docIndex as number, docSet as list) => html::attributed(
		{
			class = "topbar mobile-only"
			role = "banner"
		}
		{
			div = html::attributed(
				{
					class = "topbar-row"
				}
				[
					div = html::class( "topbar-spacer", "Contents" )
					a = html::attributed(
						{
							class = "brand"
							href = "/"
						}
						{
							img = html::attributed(
								{
									src = "/assets/images/procat_banner_white_transparent.png"
									alt = siteName & " logo"
								}
								null
							)
						}
					)
					label = html::attributed(
						{
							for = "sidebar-toggle"
							class = "topbar-nav-toggle"
							aria-controls = "sidebar"
							role = "button"
							tabindex = "0"
						}
						"Contents"
					)
				]
			)
		}
	)

	// nav::sidebar
	nav::sidebar = (siteName as text, selectedPageIndex as number, pagesAndSections as list ) => html::attributed(
		{
			id = "sidebar"
			class = "sidebar"
		}
		[
			a = html::attributed(
				{
					class = "brand desktop-only"
					href = "/"
				}
				[
					img = html::attributed(
						{
							src = "/assets/images/procat_banner_white_transparent.png"
							alt = siteName & " banner"
						}
						null
					)
				]
			)
			nav = html::attributed(
				{
					class = "toc"
					aria-label = "Site navigation"
				}
				List.Transform(
					pagesAndSections
					(page as record, pageIndex as number) => (
						let
							isSelectedPage = (selectedPageIndex == pageIndex)
							slugPrefix = (
								if isSelectedPage then
									"#"
								else
									page{ DocSlug } & "#"
							)
							pageNavigation = #(details = 
								html::attributed(
									{
										class = "toc-group"
										data-page = page{ DocTitle }
										open = isSelectedPage
									}
									[
										summary = html::class(
											"toc-heading"
											page{ DocTitle }
										)
										ul = html::class(
											"toc-links"
											List.Transform(
												page{ DocSections }
												(_section as record) => [
													a = html::attributed(
														{
															href = slugPrefix & _section{ Id }
														}
														_section{ Section }
													)
												]
											)
										)
									]
								)
							)
						in
							pageNavigation
					)
				)
			)
		]
	)

	// getHtmlClass
	getHtmlClass = ( value as any ) => (
		if Value.HasMetadata( value ) then
			let
				attributes = Record.FieldOrDefault(
					Value.Metadata( value )
					Identifier.FromText( "html", "attributes" )
					null
				)
				class = (
					if attributes == null then
						null
					else
						Record.FieldOrDefault( attributes, "class", null )
				)
			in
				class
		else
			""
	)

	// combineClasses
	combineClasses = ( class1 as text, class2 as text ) => (
		if class2 == "" then
			class1
		else
			$"$(class1) $(class2)"
	)

	// nav::main
	nav::main = (siteOwner as text, docContent as record) => html::class(
		combineClasses( "content", getHtmlClass( docContent{ body } ) )
		docContent{ body } & [
			footer = html::class(
				"footer"
				html::copyright( siteOwner )
			) 
		]
	)
}
