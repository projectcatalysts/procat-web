namespace html

meta {
}

{
	// html::href creates a href from an id and title
	html::href = (id as text, title as text, prefix as text) => (
		let
			replaced_invalid = Text.Transform( title, ":(),.", "" )
			replaced_ampersand = Text.Transform( replaced_invalid, "&", "and" )
			replaced_space = Text.Transform( replaced_ampersand, " ", "-" )
			lcase = Text.Lower( replaced_space )
		in
			if id == "" then
				$"$(prefix)$(lcase)"
			else
				$"$(prefix)$(id)-$(lcase)"
	)

	// html::attr is used to constuct a html attributes metadata
	html::attr = (metadata as record) => {
		html::attributes = metadata
	}

	// html::attributed is used to constuct a html attributes metadata
	html::attributed = (metadata as record, value as any) => (
		value meta {
			html::attributes = metadata
		}
	)

	// html::document is used to constuct a html document
	html::document = (doctype as text, language as text, head as list, body as list) => (
		{
			html = {
				html::attributes = {
					lang = "en"
				}
			} @> {
				head = head
				body = body
			}
		}
	)

	// html::meta should only be used for fields named 'meta'
	html::meta = ( charset as text ) => (
		{
			html::attributes = {
				charset = "UTF-8"
			}
		} @> null
	)

	// html::link should only be used for fields named 'link'
	html::link = (href as text, rel as text) => (
		{
			html::attributes = {
				href = href
				rel = rel
			}
		} @> null
	)

	// html::stylesheet should only be used for fields named 'link'
	html::stylesheet = (href as text) => (
		html::link( href, "stylesheet" )
	)

	// html::class is used to provide a class name to an HTML element
	html::class = (className as text, content as any ) => (
		{
			html::attributes = {
				class = className
			}
		} @> content
	)

	// html::copyright
	html::copyright = (entity as text) => (
		let
			/*
			year = DateTime.ToText(
				DateTime.LocalNow()
				"yyyy"
			)
			*/
			year = "2025"
			copyright = $"Â© $(year) $(entity)"
		in
			copyright
	)

	// html::link is used to provide a class name to an HTML element
	html::styled_link = (href as text, className as text, content as any ) => (
		{
			html::attributes = {
				href = href
				class = className
			}
		} @> content
	)

	html::github_svg = (class as text) => #(svg =
		html::attributed(
			{
				class = class
				viewBox = "0 0 16 16"
				aria-hidden = "true"
			}
			[
				path = html::attributed(
					{
						d = `M8 .2a8 8 0 0 0-2.53 15.6c.4.07.55-.18.55-.39
							0-.19-.01-.82-.01-1.49-2 .37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13
							-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66
							.07-.52.28-.87.5-1.07-1.78-.2-3.64-.89-3.64-3.95
							0-.87.31-1.58.82-2.14-.08-.2-.36-1.01.08-2.1 0 0 .67-.21 2.2.82
							.64-.18 1.33-.27 2.01-.27s1.37.09 2.01.27c1.53-1.03 2.2-.82 2.2-.82
							.44 1.09.16 1.9.08 2.1.51.56.82 1.27.82 2.14 0 3.07-1.87 3.75-3.65 3.95
							.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.19 0 .21.15.47.55.39A8 8 0 0 0 8 .2Z`
					}
					null
				)
			]
		)
	)
}
